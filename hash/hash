#!/usr/bin/python

import os
import math

class Primes(object):

    def get_next(self,n):
        """
        The hash table should be an array with length about 1.3 times 
        the maximum number of keys that will actually be in the table, and
        Size of hash table array should be a prime number
        """

        #if n zero increment to 1
        if n == 0: n += 1

        #increase size by 30 percent and round up
        n = int(math.ceil(n * 1.3))

        return self.find_prime_in_range(n, 2*n)

    def find_prime_in_range(self,a,b):
        """
        Find next prime in range
        """

        for p in range(a, b):
            for i in range(2, p):
                if p % i == 0:
                    break
            else:
                return p
        return None

class HashTable(object):

    _storage = None
    _modulus = None#2069
    _data = None

    def __init__(self,data_size = 0):
        """
        Object initialization
        """

        self._data = data_size

        self.set_storage_size()

    def set_storage_size(self):
        """
        Set the storage size of the internal data structure
        """

        self._modulus = Primes().get_next(self._data)

        self._storage = [None] * self._modulus

    def get(self,key):
        """
        Get a value based on a key
        """

        index = self.hash(key)

        try:
            return self._storage[index]
        except IndexError:
            return None

    def set(self,key,value):
        """
        Set a value based on a key
        """

        index = self.hash(key)

        self._storage[index] = value

        return self

    def hash(self,key):
        """
        Hash function returns storage index
        """

        if key == '' or key == None:
            return False

        character_count = 1
        index = 0
        for character in key:

            #ASCII multiplied by position in string
            index += ord(character) * character_count
            character_count += 1

        return index % self._modulus

print(HashTable(36).set('Phillip',{"age" : 36}).get('Phillip'))