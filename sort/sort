#!/usr/bin/python

import os
import ptvsd

ptvsd.enable_attach(address = ('192.168.33.10', 3000))
#ptvsd.wait_for_attach()

class QuickSort(object):

    def __init__(self,data):

        self.quick_sort(data,0,len(data) - 1)

    def quick_sort(self,data,low,high):

        if low < high:
            partition = self.partition(data,low,high)
            self.quick_sort(data,low,partition - 1)
            self.quick_sort(data,partition + 1,high)

    def partition(self,data,low,high):

        print("Low " + str(low) + " High " + str(high))
        print(data)

        pivot = low

        concater = ""
        for j in range(low + 1 ,high + 1):

            concater += str(data[j]) + ", "

            if data[j] <= data[low]:
                pivot += 1
                print("pivot " + str(pivot) + " j " + str(j))
                data[j], data[pivot] = data[pivot], data[j]
                print(data)

        data[pivot], data[low] = data[low], data[pivot]

        print("[" + concater.strip() + "]")
        print(data)
        print("\n")

        return pivot

#QuickSort([7,3,5,1])

class MergeSort(object):

    def __init__(self,data):

        self.merge_sort(data)
        print(data)

    def merge_sort(self,data):

        print(data)
        if len(data) > 1:
            left, right = self.partition(data)
            self.merge_sort(left)
            self.merge_sort(right)

            i = j = k = 0
          
            # Copy data to temp data left[] and right[] 
            while i < len(left) and j < len(right): 
                if left[i] < right[j]: 
                    data[k] = left[i] 
                    i+=1
                else: 
                    data[k] = right[j] 
                    j+=1
                k+=1
            
            # Checking if any element was left 
            while i < len(left): 
                data[k] = left[i] 
                i+=1
                k+=1
            
            while j < len(right): 
                data[k] = right[j] 
                j+=1
                k+=1

    def partition(self,data):

        mid = int(len(data)/2)
        return data[:mid], data[mid:]

MergeSort([7,3,5,1,8])